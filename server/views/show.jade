extends layout

block content
  script.
    var Header = React.createClass({
      render: function () {
        return React.DOM.h3({}, [
          React.DOM.span({className: 'glyphicon glyphicon-hdd dir-icon'}),
          React.DOM.a({href: '/'}, 'Recordings'),
          React.DOM.span({className: 'dir-sep'}, '/'),
          React.DOM.span({}, this.props.id)
        ]);
      }
    });

    var Timeline = React.createClass({
      render: function () {
        var metadata = this.props.metadata;

        // var video = metadata.video;
        // var timespan = video[video.length - 1] - video[0].instant;

        var colors = {};

        // video..filter(function (event) {
        //   return event.type === 'RECORDING_STARTED';
        // }).forEach(function (event) {
        //   colors[event.ssrc] = color.
        // });

        // video.filter(function (event) {
        //   return event.type === 'SPEAKER_CHANGED';
        // });

        return React.DOM.div({}, '');
      }
    });

    var Player = React.createClass({
      render: function () {
        var content;

        if (this.props.src) {
          content = React.DOM.video({
            src: this.props.src,
            controls: true,
            className: 'center-block',
            style: {maxWidth: '100%'}
          });
        } else {
          content = React.DOM.div({
            className: 'progress'
          }, [
            React.DOM.div({
              className: 'progress-bar progress-bar-striped active',
              style: {
                width: '100%'
              }
            })
          ]);
        }

        return React.DOM.div({
          className: 'panel panel-default'
        }, [
          React.DOM.div({
            className: 'panel-body'
          }, content)
        ]);
      }
    });

    var App = React.createClass({
      getInitialState: function () {
        return {conference: {}};
      },
      componentDidMount: function () {
        var id = this.props.id;
        $.get('/api/conferences/' + id + '.json', function (conference) {
          var action;

          if (conference.src) {
            this.setState({conference: conference});
          } else {
            action = '/api/conferences/' + conference.id + '/actions/mix.json';
            $.post(action, function (conference) {
              this.setState({conference: conference});
            }.bind(this));
          }
        }.bind(this));
      },
      render: function () {
        var conference = this.state.conference;
        return React.DOM.div({
          className: 'container'
        }, [
          Header({id: this.props.id}),
          Timeline({metadata: conference.metadata}),
          Player({src: conference.src})
        ]);
      }
    });

    React.renderComponent(App({id: '#{id}'}), document.getElementById('app'));
